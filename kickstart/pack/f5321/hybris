pushd $IMG_OUT_DIR

MD5SUMFILE=md5.lst

DEVICE_VERSION_FILE=./hw-release

EXTRA_NAME=""

if [ -n "@EXTRA_NAME@" ] && [ "@EXTRA_NAME@" != @"EXTRA_NAME"@ ]; then
  EXTRA_NAME="@EXTRA_NAME@-"
fi

DEVICE=""
DEVICE_VERSION=""

if [[ -a $DEVICE_VERSION_FILE ]]; then
  source $DEVICE_VERSION_FILE
  DEVICE=$MER_HA_DEVICE
  DEVICE_VERSION=-$VERSION_ID
fi

source ./sailfish-release
if [ "$SSU_RELEASE_TYPE" = "rnd" ]; then
  RELEASENAME=$NAME-${EXTRA_NAME// /_}$SAILFISH_FLAVOUR-$VERSION_ID-$DEVICE$DEVICE_VERSION
else
  RELEASENAME=$NAME-${EXTRA_NAME// /_}$VERSION_ID-$DEVICE$DEVICE_VERSION
fi

# Setup LVM image
dd if=/dev/zero bs=1 count=0 of=temp.img seek=3000M
LVM_LOOP=$(/sbin/losetup -f)
/sbin/losetup $LVM_LOOP temp.img
/usr/sbin/pvcreate $LVM_LOOP
/usr/sbin/vgcreate sailfish $LVM_LOOP

# Resize root and home to minimum
ROOT_LOOP=$(/sbin/losetup -f)
/sbin/losetup $ROOT_LOOP root.img
/sbin/e2fsck -f -y $ROOT_LOOP
# The "on is al ready" sed hack is added to handle cases when resize2fs
# outputs "The filesystem is already X blocks long" to stderr:
BLOCKS=$(/sbin/resize2fs -M $ROOT_LOOP 2>&1 | tail -n 2 | sed "s/is already/on is al ready/" | /bin/grep "The filesystem on" | /bin/cut -d ' ' -f 7)
echo We got ourselves root blocks _ $BLOCKS _
SIZE=$(/usr/bin/expr $BLOCKS \* 4096)
echo after maths size _ $SIZE _
/usr/sbin/lvcreate -L ${SIZE}B --name root sailfish
/bin/sync
/sbin/losetup -d $ROOT_LOOP
/usr/sbin/vgchange -a y
dd if=root.img bs=4096 count=$BLOCKS of=/dev/sailfish/root

HOME_LOOP=$(/sbin/losetup -f)
/sbin/losetup $HOME_LOOP home.img
/sbin/e2fsck -f -y $HOME_LOOP
# The "on is al ready" sed hack is added to handle cases when resize2fs
# outputs "The filesystem is already X blocks long" to stderr:
BLOCKS=$(/sbin/resize2fs -M $HOME_LOOP 2>&1 | tail -n 2 | sed "s/is already/on is al ready/" | /bin/grep "The filesystem on" | /bin/cut -d ' ' -f 7)
echo We got ourselves home size _ $BLOCKS _
SIZE=$(/usr/bin/expr $BLOCKS \* 4096)

/usr/sbin/lvcreate -L ${SIZE}B --name home sailfish
/bin/sync
/sbin/losetup -d $HOME_LOOP
/usr/sbin/vgchange -a y
dd if=home.img bs=4096 count=$BLOCKS of=/dev/sailfish/home

/usr/sbin/vgchange -a n sailfish

# Temporary dir for making factory image backups.
FIMAGE_TEMP=$(mktemp -d -p $(pwd))

# For some reason loop files created by imager don't shrink properly when
# running resize2fs -M on them. Hence manually growing the loop file here
# to make the shrinking work once we have the image populated.
dd if=/dev/zero bs=1 seek=1400000000 count=1 of=fimage.img
/sbin/e2fsck -f -y fimage.img
/sbin/resize2fs -f fimage.img

pigz -7 root.img
md5sum -b root.img.gz > root.img.gz.md5

pigz -7 home.img
md5sum -b home.img.gz > home.img.gz.md5

mount -o loop fimage.img $FIMAGE_TEMP
mkdir -p $FIMAGE_TEMP/${RELEASENAME}
mv root.img.gz* $FIMAGE_TEMP/${RELEASENAME}
mv home.img.gz* $FIMAGE_TEMP/${RELEASENAME}
umount $FIMAGE_TEMP
rmdir $FIMAGE_TEMP

/sbin/e2fsck -f -y fimage.img
/sbin/resize2fs -f -M fimage.img

# To make the file magic right lets convert to single file sparse image.
# 3456M size is selected so that we always will have only one file as output.
/usr/bin/img2simg -C 3456M fimage.img
rm fimage.img

/sbin/losetup -d $LVM_LOOP

mv temp.img sailfish.img

/usr/bin/atruncate sailfish.img
# To make the file magic right lets convert to single file sparse image.
# 3456M size is selected so that we always will have only one file as output.
/usr/bin/img2simg -C 3456M sailfish.img
rm sailfish.img

chmod 755 flash.*

FILES="flash* *.img* *.exe *.dll"
FILES_TO_COPY="*.urls"

mkdir -p ${RELEASENAME}
cp ${FILES_TO_COPY} ${RELEASENAME}/

mv ${FILES} ${RELEASENAME}/

# Calculate md5sums of files included to the archive
cd ${RELEASENAME}
md5sum * > $MD5SUMFILE
cd ..

# Package stuff back to archive
zip -r ${RELEASENAME}.zip $RELEASENAME

# Remove the files from the output directory
rm -r ${RELEASENAME}

popd
